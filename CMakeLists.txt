#Define the project we are working on
project(mscomplex3d)

# Look for various software we need
cmake_minimum_required(VERSION 2.6)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

find_package(OpenCL REQUIRED)

find_package(OpenMP REQUIRED)

find_package(Boost 1.48 COMPONENTS program_options system date_time REQUIRED)

set(OPENCL_NUM_WORK_ITEMS_PER_GROUP 256 CACHE STRING
      "number of work items in an opencl workgroup" )

set(OPENCL_NUM_WORK_GROUPS 32 CACHE STRING
      "number of work items in an opencl workgroup")

include_directories(
  ${Boost_INCLUDE_DIRS}
  ${OPENCL_INCLUDE_DIRS}

  ${CMAKE_CURRENT_BINARY_DIR}
  ${CMAKE_CURRENT_SOURCE_DIR}/dmsc/
  ${CMAKE_CURRENT_SOURCE_DIR}/dmsc/OpenCL
)

# generate a headerfile/sourcefile containing the shader source code as strings
function(files_to_c_variables headerfilename sourcefilename)
  file(WRITE ${headerfilename} "// this is an automatically generated file\n")
  file(WRITE ${sourcefilename} "// this is an automatically generated file\n")

  foreach(i ${ARGN})
    file(READ ${i} file_str)
    string(REPLACE "\n" "\\n\"\\\n\"" file_str "${file_str}")
    get_filename_component(bn ${i} NAME)
    string(REPLACE "." "_" bn "${bn}")
    string(TOUPPER "${bn}" bn)
    file(APPEND ${headerfilename} "extern const char *${bn}; \n\n")
    file(APPEND ${sourcefilename}        "const char *${bn} = \"${file_str}\";\n\n")
  endforeach(i)

  set_source_files_properties(${sourcefilename} PROPERTIES OBJECT_DEPENDS "${ARGN}")
endfunction(files_to_c_variables)


set(${PROJECT_NAME}_OPENCL_SRCS
# These two are generated by the following call to files_to_c_variables
    ${CMAKE_CURRENT_BINARY_DIR}/grid_dataset_cl_sources.h
    ${CMAKE_CURRENT_BINARY_DIR}/grid_dataset_cl_sources.cpp

# These are the raw files that are copied to c strings in the above files
    ${CMAKE_CURRENT_SOURCE_DIR}/dmsc/OpenCL/grid_dataset.clh
    ${CMAKE_CURRENT_SOURCE_DIR}/dmsc/OpenCL/grid_dataset_assigngradient.cl
    ${CMAKE_CURRENT_SOURCE_DIR}/dmsc/OpenCL/grid_dataset_markandcollect.cl
    ${CMAKE_CURRENT_SOURCE_DIR}/dmsc/OpenCL/grid_dataset_ownerextrema.cl
)


files_to_c_variables(${${PROJECT_NAME}_OPENCL_SRCS})

set(${PROJECT_NAME}_SRCS ${${PROJECT_NAME}_SRCS}

    ${CMAKE_CURRENT_SOURCE_DIR}/dmsc/utl.h
    ${CMAKE_CURRENT_SOURCE_DIR}/dmsc/utl.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/dmsc/aabb.h
    ${CMAKE_CURRENT_SOURCE_DIR}/dmsc/n_vector.h


    ${CMAKE_CURRENT_SOURCE_DIR}/dmsc/grid.h
    ${CMAKE_CURRENT_SOURCE_DIR}/dmsc/grid.cpp

    ${CMAKE_CURRENT_SOURCE_DIR}/dmsc/grid_dataset.h
    ${CMAKE_CURRENT_SOURCE_DIR}/dmsc/grid_dataset_inl.h
    ${CMAKE_CURRENT_SOURCE_DIR}/dmsc/grid_dataset_base.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/dmsc/grid_dataset_algs.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/dmsc/grid_dataset_outcore.cpp

    ${CMAKE_CURRENT_SOURCE_DIR}/dmsc/grid_mscomplex.h
    ${CMAKE_CURRENT_SOURCE_DIR}/dmsc/grid_mscomplex.cpp

    ${CMAKE_CURRENT_SOURCE_DIR}/dmsc/grid_outcore.h
    ${CMAKE_CURRENT_SOURCE_DIR}/dmsc/grid_outcore.cpp

    ${CMAKE_CURRENT_SOURCE_DIR}/dmsc/OpenCL/grid_dataset_cl.h
    ${CMAKE_CURRENT_SOURCE_DIR}/dmsc/OpenCL/grid_dataset_cl.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/dmsc/OpenCL/cl.hpp

    ${CMAKE_CURRENT_SOURCE_DIR}/main.cpp

    ${${PROJECT_NAME}_OPENCL_SRCS}
)

configure_file(${PROJECT_SOURCE_DIR}/config.h.in ${PROJECT_BINARY_DIR}/config.h)

if(OPENMP_FOUND)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()

add_executable(${PROJECT_NAME}  ${${PROJECT_NAME}_SRCS})

target_link_libraries(${PROJECT_NAME}
  ${Boost_LIBRARIES}
  ${OPENCL_LIBRARIES}
)

install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX})


# option(BUILD_EXEC_CUDA "build with cuda support" OFF)
#
#   if(BUILD_EXEC_CUDA)
#
#     find_package(CUDA REQUIRED)
#
#     set(${PROJECT_NAME}_SRCS ${${PROJECT_NAME}_SRCS}
#         ${CMAKE_CURRENT_SOURCE_DIR}/dmsc/CUDA/grid_dataset.cu
#         ${CMAKE_CURRENT_SOURCE_DIR}/dmsc/CUDA/cutil.h
#     )
#
#     CUDA_ADD_EXECUTABLE(${PROJECT_NAME}  ${${PROJECT_NAME}_SRCS})
#
#   else(BUILD_EXEC_CUDA)
#
#     add_executable(${PROJECT_NAME}  ${${PROJECT_NAME}_SRCS})
#
#   endif(BUILD_EXEC_CUDA)

option(BUILD_VTK_VIEWER "build the mscomplex viewer" OFF)

if(BUILD_VTK_VIEWER)
include(vtk_viewer/vtk_viewer.cmake)
endif(BUILD_VTK_VIEWER)
